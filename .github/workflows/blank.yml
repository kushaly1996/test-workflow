name: "Connect to an AWS role from a GitHub repository"
on:
  push:
    paths:
      - zopnow-4417/**
      - zsaws/**
    branches:
      - main

env:
  AWS_REGION: "us-west-2" # Change to reflect your Region

# Permission can be added at job level or workflow level
permissions:
  id-token: write   # This is required for requesting the JWT(JSON Web Token)
  contents: read    # This is required for actions/checkout

jobs:
  process-file-name-and-create-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.generate-matrix.outputs.matrix }}
    steps:
      - name: Git clone the repository
        uses: actions/checkout@v3

      - name: Get Changed Files
        id: files
        uses: jitterbit/get-changed-files@v1
        with:
          format: space-delimited
      - run: |
          for added_modified_file in ${{ steps.files.outputs.all }}; do
            echo "added_modified_file=${added_modified_file}" >> $GITHUB_ENV
          done
      # - name: Set up file_names array
      #   id: set-file-names
      #   run: |
      #     file_names=()
      #     for added_modified_file in ${{ steps.files.outputs.all }}; do
      #      if [[ $(basename ${added_modified_file}) == 'terragrunt.hcl' ]]; then
      #         dir_name=$(dirname ${added_modified_file} | cut -d'/' -f2)
      #         file_names+=("$dir_name")
      #       fi
      #     done
      #     # Use jq to remove double quotes and set the array as an output
      #     output=$(echo "${file_names[*]}" | jq -c -R .)
      #     echo "::set-output name=file_name::$output"
      #   shell: bash

      - name: Check if modified file is zs-aws and assume AWS role
        id: check-and-assume-role
        run: |
          # Initialize an empty array to store file names
          file_names=()
            # Assuming you want to set 'file_name' based on specific conditions
            # Modify this logic as needed
            for added_modified_file in ${{ steps.files.outputs.all }}; do
              if [[ $(basename ${added_modified_file}) == 'terragrunt.hcl' ]]; then
                dir_name=$(dirname ${added_modified_file} | cut -d'/' -f2)
                file_names+=("$dir_name")
              fi
           done
            # Join the array elements into a comma-separated string
          file_names_str=$(IFS=,; echo "${file_names[@]}")
          echo ::set-output name=file_names::$file_names_str
        shell: bash
      # - name: Set up file_names array
      #   id: check-and-assume-role
      #   run: |
      #     file_names=()
      #     for added_modified_file in ${{ steps.files.outputs.all }}; do
      #       if [[ $(basename ${added_modified_file}) == 'terragrunt.hcl' ]]; then
      #       dir_name=$(dirname ${added_modified_file} | cut -d'/' -f2 )
      #       file_names+=("$dir_name")
      #       fi
      #     done
      #     #echo ::set-output name=file_name::${file_names[*]}
      #     echo ::set-output name=file_names::["${file_names[@]}"]


      #   shell: bash

      - name: Print file_name
        run: echo file_name is ${{ steps.check-and-assume-role.outputs.file_names }}

      # - name: Generate Matrix
      #   id: generate-matrix
      #   run: |
      #     echo "FILE_NAME= ${{ toJSON(steps.check-and-assume-role.outputs.file_name) }}"
      #     echo ::set-output name=file_name::${FILE_NAME}

      - name: Generate Matrix
        id: generate-matrix
        run: |
          matrix_data=${{ toJSON(steps.check-and-assume-role.outputs.file_names) }}
          echo Matrix Data: $matrix_data
          echo ::set-output name=matrix::$matrix_data 
      # - name: Generate Matrix
      #   id: generate-matrix
      #   run: |
      #     echo "matrix_data=${{ steps.check-and-assume-role.outputs.file_name }}"
      #     echo "::set-output name=matrix::[\"$matrix_data\"]"


           

  use-dynamic-matrix:
    runs-on: ubuntu-latest
    needs: process-file-name-and-create-matrix
    # env:
    #   file_name: ${{needs.process-file-name-and-create-matrix.outputs.matrix}}
    strategy:
      matrix:
        file_name: 
        - ${{ toJson(needs.process-file-name-and-create-matrix.outputs.matrix) }} 
    steps:

      - name: priting the values
        run:
          echo "${{ matrix.file_name }}"

